// Not only send the vue component, but also the file path
// keys should be english and namespaced, dot separated
// should start with the module name?
// Research: does outputting a "diff" work?
// Research: does it make a difference to the llm if we remove whitespace?
// Maybe only send the <template> part? Or send template and script in 2 requests
// Find everything that can be put into a translation system
// Research which one is better:
// -    ...
// +    {{ $t('foo.bar') }} <br />
//
//     'foo.bar': 'Um alle neuen Funktionen zu unterstÃ¼tzen, muss dieses Zertifikat aktualisiert werden.'
// or:
// whole component and then
// {{ temporaryTranslationCall('foo.bar', 'Um alle neuen ...') }}
// (and then we parse it with regex)

/* eslint-disable no-shadow */

// Replace 'your_api_key' with your actual API key for OpenAI or use process.env.OPENAI_API_KEY

const fs = require("fs").promises

const OPENAI_API_KEY = "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"

function showLoading(message) {
    const frames = ["-", "\\", "|", "/"]
    let index = 0

    const interval = setInterval(() => {
        if (index === 0) {
            message = `\r${message} -`
        } else {
            message = `-`
        }
        process.stdout.write(`${message}`)
        index = (index + 1) % frames.length
    }, 1000)

    return () => {
        clearInterval(interval)
        process.stdout.write("\r\n") // Clear the line
    }
}

const sendToOpenAI = async (fileContent, filePath) => {
    const content = `${filePath}\n${fileContent}`
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
            model: "gpt-4-1106-preview",
            messages: [
                {
                    role: "system",
                    content: `Convert this code to be compatible with vue 3 and setup in script tag without using defineComponent and don't remove any piece of code, alos add the missing imports if needed and don't use momet lib instead use the fns from date-fns

                    ${content}

                    return the component it self as json like this without any other texts
                     { "component" : will contain the html code generated by you like above}`,
                },
                {
                    role: "user",
                    content: content,
                },
            ],
            temperature: 1,
            max_tokens: 4096,
            top_p: 1,
            frequency_penalty: 0,
            presence_penalty: 0,
        }),
    })

    if (!response.ok) {
        console.log(await response.json())
        throw new Error(`OpenAI API request failed: ${response.statusText}`)
    }

    const responseData = await response.json()
    return responseData.choices[0].message.content
}

const excludedFilePaths = ["./resources/js/screens/403.vue", "./resources/js/screens/404.vue", "./resources/js/screens/auth/login.vue", "./resources/js/screens/auth/register.vue"]

const main = async (files, index = 0) => {
    const filePath = files[index]
    console.log(`Start processing ${filePath}! \n\n`)
    const stopLoading = showLoading("Processing \n")
    try {
        if (!OPENAI_API_KEY) {
            throw new Error("OpenAI API key is missing. Please set your OPENAI_API_KEY environment variable.")
        }
        // Read the file's content as utf-8
        const fileContent = await fs.readFile(filePath, "utf8")

        let response = await sendToOpenAI(fileContent, filePath)
        console.log(response)
        response = JSON.parse(response.replace("```json", "").replace("```", ""))
        // const newFileContent = await replaceLangMessages(response)

        // Update the file with the response from OpenAI
        await fs.writeFile(filePath, response.component)
        excludedFilePaths.push(filePath)
        console.log(`File updated successfully with the response from OpenAI: ${filePath} \n`)
    } catch (error) {
        console.log(error.stack)
        console.error("Error:", error.message)
    } finally {
        stopLoading()
    }
    // setTimeout(() => {
    //     main(files, ++index)
    // })
}

// Get the file path from command line arguments
// const filePath = process.argv[2]
//
// // Call the main function with the file path
// if (!filePath) {
//     console.log("Please provide a file path as a parameter.")
// } else {
// main("./resources/js/screens/appointments/create.vue")
// }

async function getFilesInFolder(folderPath) {
    const fileList = []

    async function traverseDirectory(currentPath) {
        const items = await fs.readdir(currentPath)
        for (const item of items) {
            if (item === ".DS_Store") {
                continue
            }
            const fullPath = currentPath + "/" + item
            if (excludedFilePaths.includes(fullPath)) {
                continue
            }
            const stats = await fs.stat(fullPath)

            if (stats.isDirectory()) {
                // Recursively traverse subfolders
                traverseDirectory(fullPath)
            } else {
                // Add file to the list
                fileList.push(fullPath)
            }
        }
    }

    await traverseDirectory(folderPath)
    return fileList
}

const folderPath = "./resources/js/screens"
getFilesInFolder(folderPath).then((files) => {
    main(files)
})
